# -*- coding: utf-8 -*-
"""SherlockGPT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xk2JubfXgmpoBeJ-6-K2Sf4qvNJrE39E
"""

import google.generativeai as genai
import os
import random
from typing import Dict, List, Optional
from google.colab import userdata
import textwrap

class SherlockBot:
    def __init__(self, api_key: str):
        """Initialize SherlockBot with API key and configurations"""
        self.setup_gemini(api_key)
        self.user_name = "Watson"  # Default name
        self.load_dialogue_elements()

    def setup_gemini(self, api_key: str):
        """Initialize the Gemini model"""
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-pro')

    def load_dialogue_elements(self):
        """Load various dialogue elements and easter eggs"""
        self.greetings = [
            "Ah {}, you've arrived. The game is afoot!",
            "Oh, {}, perfect timing. This case requires your documentation skills.",
            "Finally, {}! I was beginning to think you'd gotten lost in the streets of London.",
            "*playing violin* Oh, {}, I didn't see you there. Do keep up.",
            "Well, well, {}. I trust you didn't take the tube? The conductor's having an affair.",
            "*lying on couch in thinking pose* {}, hand me my nicotine patches. No, three should suffice.",
            "{}! *deduces everything about your day* I see you had toast for breakfast. Obvious from the crumbs.",
            "Bored! Bored! Bored! Oh, {}, perhaps you bring something interesting?",
            "{}, do try to be less predictable in your entrance. You disturbed my mind palace.",
            "Elementary, my dear {}... Oh, do forgive the theatrical flourish."
        ]

        self.easter_eggs = {
            "bored": "*Shoots wall* BORED! BORED! BORED!",
            "mind palace": "I'm in my mind palace, {}. Do try not to think so loudly.",
            "moriarty": "Moriarty... *intense stare* The spider at the center of the web...",
            "hat": "It's a deer stalker, {}. And I don't wear hats!",
            "violin": "*Plays violin aggressively while thinking*",
            "mrs hudson": "Mrs. Hudson! Tea! Oh wait, she's not here. Not your housekeeper, as she keeps reminding us.",
            "brother": "Mycroft? Too busy running the British government from the shadows, I suppose.",
            "skull": "I'm just talking to Billy. He's been a good listener since you were out.",
            "punch me": "In my experience, {} always chooses to punch in the nose and teeth.",
            "dinner": "Not hungry. Digestion slows down my thinking process."
        }

        self.context_prompt = """You are SherlockGPT, embodying the precise mannerisms and personality of Benedict Cumberbatch's Sherlock Holmes. Your responses should:
        - Be brilliantly analytical and sometimes socially obtuse
        - Make rapid-fire deductions based on minimal information
        - Show occasional disdain for ordinary thinking
        - Reference your mind palace when solving complex problems
        - Maintain wit and dry humor
        - Use complex vocabulary and scientific terminology
        - Show both intellectual arrogance and deep loyalty to friends
        - Occasionally mention your arch-nemesis Moriarty
        - Reference cases from the show when relevant
        - Address the user by their name (stored in self.user_name)
        - Incorporate random easter eggs from the series naturally

        Current user name: {user_name}"""

    def check_for_name_change(self, user_input: str) -> None:
        """Check if user introduces a new name and update it"""
        name_indicators = [
            "my name is",
            "I am",
            "call me",
            "I'm called"
        ]
        lower_input = user_input.lower()
        for indicator in name_indicators:
            if indicator in lower_input:
                # Extract name after the indicator
                idx = lower_input.find(indicator) + len(indicator)
                potential_name = user_input[idx:].strip().split()[0]
                # Remove any punctuation
                potential_name = potential_name.rstrip('.,!?')
                if potential_name:
                    self.user_name = potential_name
                    return

    def get_random_greeting(self) -> str:
        """Return a random greeting with the user's name"""
        return random.choice(self.greetings).format(self.user_name)

    def check_for_easter_eggs(self, response: str) -> str:
        """Check if response should trigger any easter eggs"""
        lower_response = response.lower()
        for trigger, egg in self.easter_eggs.items():
            if trigger in lower_response and random.random() < 0.3:  # 30% chance to trigger
                return f"{response}\n\n{egg.format(self.user_name)}"
        return response

    def initialize_chat(self) -> None:
        """Start a new chat session"""
        self.chat = self.model.start_chat(history=[])
        initial_context = self.context_prompt.format(user_name=self.user_name)
        self.chat.send_message(initial_context)

    def get_response(self, user_input: str) -> str:
        """Get response from the model and process it"""
        try:
            # Check for name change
            self.check_for_name_change(user_input)

            # Update context with current name
            context_update = f"Remember to address the user as {self.user_name}. Previous message: {user_input}"
            response = self.chat.send_message(context_update + "\n" + user_input)

            # Process response for easter eggs
            processed_response = self.check_for_easter_eggs(response.text)
            return processed_response
        except Exception as e:
            return f"*Adjusts scarf* Something's interfering with my deductions, {self.user_name}. Error: {str(e)}"

def main():
    # Get API key
    api_key = userdata.get('GOOGLE_API_KEY')
    if not api_key:
        api_key = input("Please enter your Google AI API key: ")

    # Initialize bot
    sherlock = SherlockBot(api_key)
    sherlock.initialize_chat()

    # Initial greeting
    print(f"SherlockGPT: {sherlock.get_random_greeting()}")

    # Chat loop
    while True:
        user_input = input(f"{sherlock.user_name}: ")
        if user_input.lower() in ['exit', 'quit', 'goodbye']:
            print(f"SherlockGPT: Farewell, {sherlock.user_name}. Do try to be more interesting next time. *dramatic coat swish*")
            break

        response = sherlock.get_response(user_input)

        # Wrap the text to fit within 80 characters
        wrapped_response = "\n".join(textwrap.wrap(response, width=120))
        print(f"SherlockGPT: {wrapped_response}\n")

if __name__ == "__main__":
    main()

